{"version":3,"sources":["App.tsx","index.tsx"],"names":["Form","props","display","useState","min","setMin","max","setMax","dec","setDec","changeHandler","e","setter","isNaN","parseFloat","target","value","onSubmit","preventDefault","random","Math","addDec","toFixed","htmlFor","type","name","id","step","onChange","App","randomDisplay","setRandomDisplay","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAkBA,SAASA,EAAKC,GAAuB,IAC3BC,EAAYD,EAAZC,QAD0B,EAEZC,mBAAS,GAFG,mBAE3BC,EAF2B,KAEtBC,EAFsB,OAGZF,mBAAS,KAHG,mBAG3BG,EAH2B,KAGtBC,EAHsB,OAIZJ,mBAAS,GAJG,mBAI3BK,EAJ2B,KAItBC,EAJsB,KAO5BC,EAAgB,SACpBC,EACAC,GAEKC,MAAMC,WAAWH,EAAEI,OAAOC,SAC7BJ,EAAOE,WAAWH,EAAEI,OAAOC,SAc/B,OACE,uBAAMC,SAVc,SAACN,GACrBA,EAAEO,iBAEF,IAAMC,EAASC,KAAKD,UAAYb,EAAMF,GAAOA,EACvCiB,EAASP,WAAWK,EAAOG,QAAQd,IAEzCN,EAAQmB,IAIR,UACE,oCACE,uBAAOE,QAAQ,MAAf,sBACA,uBACEC,KAAK,SACLC,KAAK,MACLC,GAAG,MACHV,MAAOZ,EACPE,IAAKA,EACLqB,KAAK,MACLC,SAAU,SAACjB,GAAD,OAAOD,EAAcC,EAAGN,SAGtC,oCACE,uBAAOkB,QAAQ,MAAf,sBACA,uBACEC,KAAK,SACLC,KAAK,MACLC,GAAG,MACHtB,IAAKA,EACLY,MAAOV,EACPqB,KAAK,MACLC,SAAU,SAACjB,GAAD,OAAOD,EAAcC,EAAGJ,SAGtC,oCACE,uBAAOgB,QAAQ,MAAf,uBACA,uBACEC,KAAK,SACLC,KAAK,MACLC,GAAG,MACHtB,IAAI,IACJE,IAAI,IACJU,MAAOR,EACPoB,SAAU,SAACjB,GAAD,OAAOD,EAAcC,EAAGF,SAGtC,wBAAQe,KAAK,SAAb,yBAKSK,MArFf,WAAgB,IAAD,EAC6B1B,mBAAS,GADtC,mBACN2B,EADM,KACSC,EADT,KAGb,OACE,qCACE,cAAC/B,EAAD,CAAME,QAAS6B,IACdD,MCHPE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.af7d47d6.chunk.js","sourcesContent":["import React, { useState, FormEvent, Dispatch, ChangeEvent } from \"react\";\n\nfunction App() {\n  const [randomDisplay, setRandomDisplay] = useState(0);\n\n  return (\n    <>\n      <Form display={setRandomDisplay} />\n      {randomDisplay}\n    </>\n  );\n}\n\n//Props for form\ninterface FormInterface {\n  display: Dispatch<React.SetStateAction<number>>;\n}\n\nfunction Form(props: FormInterface) {\n  const { display } = props;\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(100);\n  const [dec, setDec] = useState(0);\n\n  //Checks if there is any input and saves it\n  const changeHandler = (\n    e: ChangeEvent<HTMLInputElement>,\n    setter: Dispatch<React.SetStateAction<number>>\n  ) => {\n    if (!isNaN(parseFloat(e.target.value))) {\n      setter(parseFloat(e.target.value));\n    }\n  };\n\n  //Generates random number and displays it\n  const submitHandler = (e: FormEvent) => {\n    e.preventDefault();\n\n    const random = Math.random() * (max - min) + min;\n    const addDec = parseFloat(random.toFixed(dec));\n\n    display(addDec);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <section>\n        <label htmlFor=\"min\">Minimum </label>\n        <input\n          type=\"number\"\n          name=\"min\"\n          id=\"min\"\n          value={min}\n          max={max}\n          step=\"any\"\n          onChange={(e) => changeHandler(e, setMin)}\n        />\n      </section>\n      <section>\n        <label htmlFor=\"max\">Maximum </label>\n        <input\n          type=\"number\"\n          name=\"max\"\n          id=\"max\"\n          min={min}\n          value={max}\n          step=\"any\"\n          onChange={(e) => changeHandler(e, setMax)}\n        />\n      </section>\n      <section>\n        <label htmlFor=\"dec\">Decimals </label>\n        <input\n          type=\"number\"\n          name=\"dec\"\n          id=\"dec\"\n          min=\"0\"\n          max=\"5\"\n          value={dec}\n          onChange={(e) => changeHandler(e, setDec)}\n        />\n      </section>\n      <button type=\"submit\">Generate</button>\n    </form>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}